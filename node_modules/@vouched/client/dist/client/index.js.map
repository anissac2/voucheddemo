{"version":3,"sources":["../../src/client/index.js"],"names":["initGlobals","global","FormData","File","oldAppend","prototype","append","a1","a2","a3","path","call","fs","createReadStream","toThrowableBadInput","errors","details","map","type","e","suggestion","message","forEach","InvalidRequestError","toThrowable","error","graphQLErrors","networkError","result","length","UnknownSystemError","ConnectionError","extensions","code","AuthenticationError","exception","handler","prop","p","r","data","createClient","key","opts","updateSecretClientKey","client","mutate","mutation","UpdateSecretClientKeyMutation","variables","secretClientKey","jobs","id","ids","page","token","status","pageSize","sortBy","sortOrder","withPhotos","fromDate","toDate","query","JobsQuery","from","to","submit","userPhoto","idPhoto","carInsurancePhoto","twicPhoto","dotPhoto","callbackURL","firstName","lastName","dob","SubmitJobMutation","params","Client","apiUrl","utils","Utils"],"mappings":"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","file":"index.js","sourcesContent":["import { File } from '@jeremejevs/file-api';\nimport FormData from 'form-data';\nimport fs from 'fs';\n\nimport Utils from './utils';\n\nimport {\n  UnknownSystemError,\n  ConnectionError,\n  AuthenticationError,\n  InvalidRequestError\n} from '../common/errors';\nimport {\n  SubmitJobMutation,\n  JobsQuery,\n  UpdateSecretClientKeyMutation\n} from '../common/schemas';\n\nimport initApollo from '../common/initApollo';\n\nconst initGlobals = () => {\n  global.FormData = FormData;\n  global.File = File;\n\n  const oldAppend = FormData.prototype.append;\n  // eslint-disable-next-line\n  FormData.prototype.append = function(a1, a2, a3) {\n    // is it a file?\n    if (a2.path) {\n      return oldAppend.call(this, a1, fs.createReadStream(a2.path));\n    }\n    return oldAppend.call(this, a1, a2, a3);\n  };\n};\ninitGlobals();\nconst toThrowableBadInput = details => {\n  let errors = details.map ? details : details.errors;\n  errors = errors\n    ? errors.map(e => ({\n        type: e.type,\n        suggestion: e.suggestion,\n        message: e.message\n      }))\n    : [];\n  errors.forEach(e => {\n    if (!e.suggestion) delete e.suggestion;\n  });\n  throw new InvalidRequestError('InvalidRequest', errors);\n};\nconst toThrowable = error => {\n  if (!error.graphQLErrors && !error.networkError) {\n    throw error;\n  }\n  const { networkError, graphQLErrors } = error;\n  if (networkError) {\n    if (\n      networkError.result &&\n      networkError.result.errors &&\n      networkError.result.errors.length > 0\n    ) {\n      throw new UnknownSystemError(networkError.result.errors[0].message);\n    }\n    throw new ConnectionError(networkError.message);\n  }\n  if (graphQLErrors && graphQLErrors.length > 0) {\n    // user error\n    if (graphQLErrors[0].extensions.code === 'UNAUTHENTICATED') {\n      throw new AuthenticationError();\n    }\n    if (graphQLErrors[0].extensions.code === 'BAD_USER_INPUT') {\n      if (\n        graphQLErrors[0].extensions.exception &&\n        graphQLErrors[0].extensions.exception.details\n      ) {\n        toThrowableBadInput(graphQLErrors[0].extensions.exception.details);\n      } else {\n        toThrowableBadInput(graphQLErrors[0].details);\n      }\n    }\n  }\n  throw new UnknownSystemError();\n};\nconst handler = async (prop, p) => {\n  try {\n    const r = await p();\n    if (prop && r && r.data && r.data[prop]) {\n      return r.data[prop];\n    }\n    return r;\n  } catch (error) {\n    return toThrowable(error);\n  }\n};\nconst createClient = (key, opts = {}) =>\n  initApollo(opts, null, { 'X-Api-Key': key });\n\nconst updateSecretClientKey = ({ client }) => secretClientKey =>\n  handler('updateSecretClientKey', () =>\n    client.mutate({\n      mutation: UpdateSecretClientKeyMutation,\n      variables: {\n        secretClientKey\n      }\n    })\n  );\nconst jobs = ({ client }) => ({\n  id,\n  ids,\n  page,\n  type,\n  token,\n  status,\n  pageSize,\n  sortBy,\n  sortOrder,\n  withPhotos = false,\n  fromDate,\n  toDate\n}) =>\n  handler('jobs', () =>\n    client.query({\n      query: JobsQuery,\n      variables: {\n        id,\n        pageSize,\n        token,\n        ids,\n        page,\n        type,\n        status,\n        sortBy,\n        sortOrder,\n        withPhotos,\n        from: fromDate,\n        to: toDate\n      }\n    })\n  );\n\nconst submit = ({ client }) => ({\n  type = 'id-verification',\n  userPhoto,\n  idPhoto,\n  carInsurancePhoto,\n  twicPhoto,\n  dotPhoto,\n  callbackURL,\n  firstName,\n  lastName,\n  dob\n}) =>\n  handler('submitJob', () =>\n    client.mutate({\n      mutation: SubmitJobMutation,\n      variables: {\n        type,\n        callbackURL,\n        params: {\n          userPhoto,\n          carInsurancePhoto,\n          twicPhoto,\n          dotPhoto,\n          idPhoto,\n          dob,\n          firstName,\n          lastName\n        }\n      }\n    })\n  );\nconst Client = (key, { apiUrl = null } = {}) => {\n  if (!key) throw new InvalidRequestError('Key can not be empty');\n  const client = createClient(key, { apiUrl });\n  return {\n    submit: submit({ client }),\n    updateSecretClientKey: updateSecretClientKey({ client }),\n    jobs: jobs({ client })\n  };\n};\n\nexport const utils = Utils;\nexport default Client;\n"]}