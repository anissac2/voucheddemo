{"version":3,"sources":["../../src/client/utils.js"],"names":["MAX_RESOLUTION","toUpload","path","buffer","mimetype","InvalidRequestError","image","imageToBase64","file","bitmap","fs","readFileSync","name","Buffer","toString","removeCallback","utils"],"mappings":";;;;;;AAAA;;;;AAEA;;AACA;;;;;;AAQA,IAAMA,iBAAiB,IAAvB;AACA,IAAMC;AAAA,sEAAW;AAAA,QAASC,IAAT,QAASA,IAAT;AAAA,2BAAeC,MAAf;AAAA,QAAeA,MAAf,+BAAwB,IAAxB;AAAA,6BAA8BC,QAA9B;AAAA,QAA8BA,QAA9B,iCAAyC,IAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AACf,gBAAI,CAACA,QAAD,IAAaF,IAAjB,EAAuB;AACrBE,yBAAW,uBAAWF,IAAX,CAAX;AACD;;AAHc,gBAIVE,QAJU;AAAA;AAAA;AAAA;;AAAA,kBAIM,IAAIC,2BAAJ,CAAwB,oBAAxB,CAJN;;AAAA;AAAA,iBAMHH,IANG;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAOL,oBAAQA,IAAR,CAPK;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAQL,0BAAcC,MAAd,EAAsBC,QAAtB,CARK;;AAAA;AAAA;;AAAA;AAMXE,iBANW;AAAA;AAAA,mBASD,wBAAYA,KAAZ,EAAmBN,cAAnB,CATC;;AAAA;AASfM,iBATe;AAAA,6CAUR,wBAAYA,KAAZ,CAVQ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAX;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAaA,IAAMC;AAAA,sEAAgB,kBAAML,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACpB;AACIM,gBAFgB,GAET,IAFS;AAAA;AAAA;AAAA,mBAILP,SAAS,EAAEC,UAAF,EAAT,CAJK;;AAAA;AAIlBM,gBAJkB;AAKZC,kBALY,GAKHC,aAAGC,YAAH,CAAgBH,KAAKI,IAArB,CALG;AAMlB;;AANkB,8CAOX,IAAIC,MAAJ,CAAWJ,MAAX,EAAmBK,QAAnB,CAA4B,QAA5B,CAPW;;AAAA;AAAA;;AASlB,gBAAIN,IAAJ,EAAU;AACRA,mBAAKO,cAAL;AACD;AAXiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAeA,IAAMC,QAAQ;AACZT;AADY,CAAd;;kBAIeS,K","file":"utils.js","sourcesContent":["import fs from 'fs';\n\nimport { InvalidRequestError } from '../common/errors';\nimport {\n  imageToFile,\n  toImage,\n  toImageBuffer,\n  resizeImage,\n  toMimeType\n} from '../common/utils';\n\nconst MAX_RESOLUTION = 2048;\nconst toUpload = async ({ path, buffer = null, mimetype = null }) => {\n  if (!mimetype && path) {\n    mimetype = toMimeType(path);\n  }\n  if (!mimetype) throw new InvalidRequestError('Mimetype not found');\n\n  let image = path\n    ? await toImage(path)\n    : await toImageBuffer(buffer, mimetype);\n  image = await resizeImage(image, MAX_RESOLUTION);\n  return imageToFile(image);\n};\n\nconst imageToBase64 = async path => {\n  // read binary data\n  let file = null;\n  try {\n    file = await toUpload({ path });\n    const bitmap = fs.readFileSync(file.name);\n    // convert binary data to base64 encoded string\n    return new Buffer(bitmap).toString('base64');\n  } finally {\n    if (file) {\n      file.removeCallback();\n    }\n  }\n};\n\nconst utils = {\n  imageToBase64\n};\n\nexport default utils;\n"]}