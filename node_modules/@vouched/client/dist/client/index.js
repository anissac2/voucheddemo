'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.utils = undefined;

var _fileApi = require('@jeremejevs/file-api');

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _utils = require('./utils');

var _utils2 = _interopRequireDefault(_utils);

var _errors = require('../common/errors');

var _schemas = require('../common/schemas');

var _initApollo = require('../common/initApollo');

var _initApollo2 = _interopRequireDefault(_initApollo);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var initGlobals = function initGlobals() {
  global.FormData = _formData2.default;
  global.File = _fileApi.File;

  var oldAppend = _formData2.default.prototype.append;
  // eslint-disable-next-line
  _formData2.default.prototype.append = function (a1, a2, a3) {
    // is it a file?
    if (a2.path) {
      return oldAppend.call(this, a1, _fs2.default.createReadStream(a2.path));
    }
    return oldAppend.call(this, a1, a2, a3);
  };
};
initGlobals();
var toThrowableBadInput = function toThrowableBadInput(details) {
  var errors = details.map ? details : details.errors;
  errors = errors ? errors.map(function (e) {
    return {
      type: e.type,
      suggestion: e.suggestion,
      message: e.message
    };
  }) : [];
  errors.forEach(function (e) {
    if (!e.suggestion) delete e.suggestion;
  });
  throw new _errors.InvalidRequestError('InvalidRequest', errors);
};
var toThrowable = function toThrowable(error) {
  if (!error.graphQLErrors && !error.networkError) {
    throw error;
  }
  var networkError = error.networkError,
      graphQLErrors = error.graphQLErrors;

  if (networkError) {
    if (networkError.result && networkError.result.errors && networkError.result.errors.length > 0) {
      throw new _errors.UnknownSystemError(networkError.result.errors[0].message);
    }
    throw new _errors.ConnectionError(networkError.message);
  }
  if (graphQLErrors && graphQLErrors.length > 0) {
    // user error
    if (graphQLErrors[0].extensions.code === 'UNAUTHENTICATED') {
      throw new _errors.AuthenticationError();
    }
    if (graphQLErrors[0].extensions.code === 'BAD_USER_INPUT') {
      if (graphQLErrors[0].extensions.exception && graphQLErrors[0].extensions.exception.details) {
        toThrowableBadInput(graphQLErrors[0].extensions.exception.details);
      } else {
        toThrowableBadInput(graphQLErrors[0].details);
      }
    }
  }
  throw new _errors.UnknownSystemError();
};
var handler = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(prop, p) {
    var r;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return p();

          case 3:
            r = _context.sent;

            if (!(prop && r && r.data && r.data[prop])) {
              _context.next = 6;
              break;
            }

            return _context.abrupt('return', r.data[prop]);

          case 6:
            return _context.abrupt('return', r);

          case 9:
            _context.prev = 9;
            _context.t0 = _context['catch'](0);
            return _context.abrupt('return', toThrowable(_context.t0));

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 9]]);
  }));

  return function handler(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();
var createClient = function createClient(key) {
  var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  return (0, _initApollo2.default)(opts, null, { 'X-Api-Key': key });
};

var updateSecretClientKey = function updateSecretClientKey(_ref2) {
  var client = _ref2.client;
  return function (secretClientKey) {
    return handler('updateSecretClientKey', function () {
      return client.mutate({
        mutation: _schemas.UpdateSecretClientKeyMutation,
        variables: {
          secretClientKey: secretClientKey
        }
      });
    });
  };
};
var jobs = function jobs(_ref3) {
  var client = _ref3.client;
  return function (_ref4) {
    var id = _ref4.id,
        ids = _ref4.ids,
        page = _ref4.page,
        type = _ref4.type,
        token = _ref4.token,
        status = _ref4.status,
        pageSize = _ref4.pageSize,
        sortBy = _ref4.sortBy,
        sortOrder = _ref4.sortOrder,
        _ref4$withPhotos = _ref4.withPhotos,
        withPhotos = _ref4$withPhotos === undefined ? false : _ref4$withPhotos,
        fromDate = _ref4.fromDate,
        toDate = _ref4.toDate;
    return handler('jobs', function () {
      return client.query({
        query: _schemas.JobsQuery,
        variables: {
          id: id,
          pageSize: pageSize,
          token: token,
          ids: ids,
          page: page,
          type: type,
          status: status,
          sortBy: sortBy,
          sortOrder: sortOrder,
          withPhotos: withPhotos,
          from: fromDate,
          to: toDate
        }
      });
    });
  };
};

var submit = function submit(_ref5) {
  var client = _ref5.client;
  return function (_ref6) {
    var _ref6$type = _ref6.type,
        type = _ref6$type === undefined ? 'id-verification' : _ref6$type,
        userPhoto = _ref6.userPhoto,
        idPhoto = _ref6.idPhoto,
        carInsurancePhoto = _ref6.carInsurancePhoto,
        twicPhoto = _ref6.twicPhoto,
        dotPhoto = _ref6.dotPhoto,
        callbackURL = _ref6.callbackURL,
        firstName = _ref6.firstName,
        lastName = _ref6.lastName,
        dob = _ref6.dob;
    return handler('submitJob', function () {
      return client.mutate({
        mutation: _schemas.SubmitJobMutation,
        variables: {
          type: type,
          callbackURL: callbackURL,
          params: {
            userPhoto: userPhoto,
            carInsurancePhoto: carInsurancePhoto,
            twicPhoto: twicPhoto,
            dotPhoto: dotPhoto,
            idPhoto: idPhoto,
            dob: dob,
            firstName: firstName,
            lastName: lastName
          }
        }
      });
    });
  };
};
var Client = function Client(key) {
  var _ref7 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref7$apiUrl = _ref7.apiUrl,
      apiUrl = _ref7$apiUrl === undefined ? null : _ref7$apiUrl;

  if (!key) throw new _errors.InvalidRequestError('Key can not be empty');
  var client = createClient(key, { apiUrl: apiUrl });
  return {
    submit: submit({ client: client }),
    updateSecretClientKey: updateSecretClientKey({ client: client }),
    jobs: jobs({ client: client })
  };
};

var utils = exports.utils = _utils2.default;
exports.default = Client;
//# sourceMappingURL=index.js.map