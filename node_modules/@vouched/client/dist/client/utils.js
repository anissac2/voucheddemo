'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _errors = require('../common/errors');

var _utils = require('../common/utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var MAX_RESOLUTION = 2048;
var toUpload = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref) {
    var path = _ref.path,
        _ref$buffer = _ref.buffer,
        buffer = _ref$buffer === undefined ? null : _ref$buffer,
        _ref$mimetype = _ref.mimetype,
        mimetype = _ref$mimetype === undefined ? null : _ref$mimetype;
    var image;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (!mimetype && path) {
              mimetype = (0, _utils.toMimeType)(path);
            }

            if (mimetype) {
              _context.next = 3;
              break;
            }

            throw new _errors.InvalidRequestError('Mimetype not found');

          case 3:
            if (!path) {
              _context.next = 9;
              break;
            }

            _context.next = 6;
            return (0, _utils.toImage)(path);

          case 6:
            _context.t0 = _context.sent;
            _context.next = 12;
            break;

          case 9:
            _context.next = 11;
            return (0, _utils.toImageBuffer)(buffer, mimetype);

          case 11:
            _context.t0 = _context.sent;

          case 12:
            image = _context.t0;
            _context.next = 15;
            return (0, _utils.resizeImage)(image, MAX_RESOLUTION);

          case 15:
            image = _context.sent;
            return _context.abrupt('return', (0, _utils.imageToFile)(image));

          case 17:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function toUpload(_x) {
    return _ref2.apply(this, arguments);
  };
}();

var imageToBase64 = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(path) {
    var file, bitmap;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            // read binary data
            file = null;
            _context2.prev = 1;
            _context2.next = 4;
            return toUpload({ path: path });

          case 4:
            file = _context2.sent;
            bitmap = _fs2.default.readFileSync(file.name);
            // convert binary data to base64 encoded string

            return _context2.abrupt('return', new Buffer(bitmap).toString('base64'));

          case 7:
            _context2.prev = 7;

            if (file) {
              file.removeCallback();
            }
            return _context2.finish(7);

          case 10:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[1,, 7, 10]]);
  }));

  return function imageToBase64(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var utils = {
  imageToBase64: imageToBase64
};

exports.default = utils;
//# sourceMappingURL=utils.js.map