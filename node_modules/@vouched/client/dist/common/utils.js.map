{"version":3,"sources":["../../src/common/utils.js"],"names":["ValidMimeTypes","injectDimensions","image","width","height","dimensions","injectDimensionsCheck","metadata","info","UnsupportedPhotoError","toImageBuffer","buffer","mimeType","find","v","failOnError","toMimeType","mime","lookup","file","toImage","imageFile","fs","existsSync","imageToInfo","jpeg","toBuffer","resolveWithObject","then","data","writeImage","writeFileSync","imageToFile","mimetype","tmpobj","tmp","fileSync","postfix","replace","name","removeCallback","UnknownSystemError","message","resizeImageRatio","ratio","Math","round","resize","resizeImage","max","min"],"mappings":"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","file":"utils.js","sourcesContent":["import mime from 'mime-types';\nimport fs from 'fs';\nimport tmp from 'tmp';\nimport sharp from 'sharp';\n\nimport { UnsupportedPhotoError, UnknownSystemError } from './errors';\n\nconst ValidMimeTypes = ['image/jpeg', 'image/jpg', 'image/png'];\n\nconst injectDimensions = (image, width, height) => {\n  if (width) {\n    image.dimensions = { width, height };\n  }\n  return image;\n};\n\nconst injectDimensionsCheck = async image => {\n  try {\n    const info = await image.metadata();\n    image = injectDimensions(image, info.width, info.height);\n    if (!image.dimensions || !image.dimensions) {\n      throw new UnsupportedPhotoError(`Unsupported image`);\n    }\n    return image;\n  } catch (error) {\n    throw new UnsupportedPhotoError('Unsupported image');\n  }\n};\nexport const toImageBuffer = async (buffer, mimeType) => {\n  if (!ValidMimeTypes.find(v => v === mimeType)) {\n    throw new UnsupportedPhotoError(`Unsupported image:${mimeType}`);\n  }\n\n  const image = sharp(buffer, { failOnError: true });\n  return injectDimensionsCheck(image);\n};\nexport const toMimeType = file => mime.lookup(file);\n\nexport const toImage = async imageFile => {\n  if (!fs.existsSync(imageFile)) {\n    throw new UnsupportedPhotoError(`${imageFile} does not exist.`);\n  }\n  const mimeType = toMimeType(imageFile);\n  return toImageBuffer(imageFile, mimeType);\n};\n\nexport const imageToInfo = image =>\n  image\n    .jpeg()\n    .toBuffer({ resolveWithObject: true })\n    .then(({ info, data }) => ({\n      info,\n      buffer: data\n    }));\n\nconst writeImage = async (image, file) => {\n  const { buffer } = await imageToInfo(image);\n  fs.writeFileSync(file, buffer);\n};\n\nexport const imageToFile = async (image, mimetype = 'image/jpeg') => {\n  const tmpobj = tmp.fileSync({ postfix: mimetype.replace(/.*\\//, '.') });\n  try {\n    await writeImage(image, tmpobj.name);\n    return tmpobj;\n  } catch (error) {\n    tmpobj.removeCallback();\n    throw new UnknownSystemError(error.message);\n  }\n};\nconst resizeImageRatio = async (image, info, ratio) => {\n  const width = Math.round(info.width * ratio);\n  const height = Math.round(info.height * ratio);\n  await image.resize(width, height);\n  image = await injectDimensions(image, width, height);\n  return image;\n};\n\nexport const resizeImage = async (image, max = null, min = null) => {\n  // assumes the dimensions has been injected\n  const info = image.dimensions;\n  if (info.width > max || info.height > max) {\n    const ratio =\n      info.width > info.height ? max / info.width : max / info.height;\n\n    image = await resizeImageRatio(image, info, ratio);\n  }\n  if (min && (info.width < min || info.height < min)) {\n    const ratio =\n      info.width < info.height ? min / info.width : min / info.height;\n\n    image = await resizeImageRatio(image, info, ratio);\n  }\n\n  return image;\n};\n\n\n"]}