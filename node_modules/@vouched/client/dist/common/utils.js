'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resizeImage = exports.imageToFile = exports.imageToInfo = exports.toImage = exports.toMimeType = exports.toImageBuffer = undefined;

var _mimeTypes = require('mime-types');

var _mimeTypes2 = _interopRequireDefault(_mimeTypes);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _tmp = require('tmp');

var _tmp2 = _interopRequireDefault(_tmp);

var _sharp = require('sharp');

var _sharp2 = _interopRequireDefault(_sharp);

var _errors = require('./errors');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var ValidMimeTypes = ['image/jpeg', 'image/jpg', 'image/png'];

var injectDimensions = function injectDimensions(image, width, height) {
  if (width) {
    image.dimensions = { width: width, height: height };
  }
  return image;
};

var injectDimensionsCheck = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(image) {
    var info;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return image.metadata();

          case 3:
            info = _context.sent;

            image = injectDimensions(image, info.width, info.height);

            if (!(!image.dimensions || !image.dimensions)) {
              _context.next = 7;
              break;
            }

            throw new _errors.UnsupportedPhotoError('Unsupported image');

          case 7:
            return _context.abrupt('return', image);

          case 10:
            _context.prev = 10;
            _context.t0 = _context['catch'](0);
            throw new _errors.UnsupportedPhotoError('Unsupported image');

          case 13:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined, [[0, 10]]);
  }));

  return function injectDimensionsCheck(_x) {
    return _ref.apply(this, arguments);
  };
}();
var toImageBuffer = exports.toImageBuffer = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(buffer, mimeType) {
    var image;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (ValidMimeTypes.find(function (v) {
              return v === mimeType;
            })) {
              _context2.next = 2;
              break;
            }

            throw new _errors.UnsupportedPhotoError('Unsupported image:' + mimeType);

          case 2:
            image = (0, _sharp2.default)(buffer, { failOnError: true });
            return _context2.abrupt('return', injectDimensionsCheck(image));

          case 4:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function toImageBuffer(_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();
var toMimeType = exports.toMimeType = function toMimeType(file) {
  return _mimeTypes2.default.lookup(file);
};

var toImage = exports.toImage = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(imageFile) {
    var mimeType;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (_fs2.default.existsSync(imageFile)) {
              _context3.next = 2;
              break;
            }

            throw new _errors.UnsupportedPhotoError(imageFile + ' does not exist.');

          case 2:
            mimeType = toMimeType(imageFile);
            return _context3.abrupt('return', toImageBuffer(imageFile, mimeType));

          case 4:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function toImage(_x4) {
    return _ref3.apply(this, arguments);
  };
}();

var imageToInfo = exports.imageToInfo = function imageToInfo(image) {
  return image.jpeg().toBuffer({ resolveWithObject: true }).then(function (_ref4) {
    var info = _ref4.info,
        data = _ref4.data;
    return {
      info: info,
      buffer: data
    };
  });
};

var writeImage = function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(image, file) {
    var _ref6, buffer;

    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return imageToInfo(image);

          case 2:
            _ref6 = _context4.sent;
            buffer = _ref6.buffer;

            _fs2.default.writeFileSync(file, buffer);

          case 5:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function writeImage(_x5, _x6) {
    return _ref5.apply(this, arguments);
  };
}();

var imageToFile = exports.imageToFile = function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(image) {
    var mimetype = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image/jpeg';
    var tmpobj;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            tmpobj = _tmp2.default.fileSync({ postfix: mimetype.replace(/.*\//, '.') });
            _context5.prev = 1;
            _context5.next = 4;
            return writeImage(image, tmpobj.name);

          case 4:
            return _context5.abrupt('return', tmpobj);

          case 7:
            _context5.prev = 7;
            _context5.t0 = _context5['catch'](1);

            tmpobj.removeCallback();
            throw new _errors.UnknownSystemError(_context5.t0.message);

          case 11:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined, [[1, 7]]);
  }));

  return function imageToFile(_x8) {
    return _ref7.apply(this, arguments);
  };
}();
var resizeImageRatio = function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(image, info, ratio) {
    var width, height;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            width = Math.round(info.width * ratio);
            height = Math.round(info.height * ratio);
            _context6.next = 4;
            return image.resize(width, height);

          case 4:
            _context6.next = 6;
            return injectDimensions(image, width, height);

          case 6:
            image = _context6.sent;
            return _context6.abrupt('return', image);

          case 8:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, undefined);
  }));

  return function resizeImageRatio(_x9, _x10, _x11) {
    return _ref8.apply(this, arguments);
  };
}();

var resizeImage = exports.resizeImage = function () {
  var _ref9 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(image) {
    var max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    var min = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    var info, ratio, _ratio;

    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            // assumes the dimensions has been injected
            info = image.dimensions;

            if (!(info.width > max || info.height > max)) {
              _context7.next = 6;
              break;
            }

            ratio = info.width > info.height ? max / info.width : max / info.height;
            _context7.next = 5;
            return resizeImageRatio(image, info, ratio);

          case 5:
            image = _context7.sent;

          case 6:
            if (!(min && (info.width < min || info.height < min))) {
              _context7.next = 11;
              break;
            }

            _ratio = info.width < info.height ? min / info.width : min / info.height;
            _context7.next = 10;
            return resizeImageRatio(image, info, _ratio);

          case 10:
            image = _context7.sent;

          case 11:
            return _context7.abrupt('return', image);

          case 12:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, undefined);
  }));

  return function resizeImage(_x14) {
    return _ref9.apply(this, arguments);
  };
}();
//# sourceMappingURL=utils.js.map