{"version":3,"sources":["../../src/common/initApollo.js"],"names":["apolloClient","process","browser","global","fetch","createDefaultCache","InMemoryCache","dataIdFromObject","result","id","sid","isFile","File","value","Blob","isUpload","variables","Object","values","some","linkHeaders","key","headers","authMiddleware","ApolloLink","operation","forward","lHeaders","setContext","httpLink","uri","apolloConfig","apiUrl","config","API_URL","credentials","requestLink","from","terminalLink","create","initialState","createCache","_config","link","connectToDevTools","ssrMode","cache","restore","ApolloClient"],"mappings":"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","file":"initApollo.js","sourcesContent":["import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloLink, split } from 'apollo-link';\nimport { createHttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-fetch';\nimport isFunction from 'lodash.isfunction';\nimport { createUploadLink } from 'apollo-upload-client';\nimport config from '../config';\n\nlet apolloClient = null;\n\n// Polyfill fetch() on the server (used by apollo-client)\nif (!process.browser) {\n  global.fetch = fetch;\n}\n\nconst createDefaultCache = () =>\n  new InMemoryCache({\n    dataIdFromObject: result => result.id || result.sid || null\n  });\n\nconst isFile = value =>\n  // eslint-disable-next-line\n  (typeof File !== 'undefined' && value instanceof File) ||\n  // eslint-disable-next-line\n  (typeof Blob !== 'undefined' && value instanceof Blob);\n// value instanceof ReactNativeFile;\n\nconst isUpload = ({ variables }) => Object.values(variables).some(isFile);\n\nconst linkHeaders = headers => {\n  const key = headers ? headers['X-Api-Key'] : null;\n  if (key) {\n    return {\n      'X-Api-Key': key\n    };\n  }\n  return {};\n};\nconst authMiddleware = headers =>\n  new ApolloLink((operation, forward) => {\n    const lHeaders = linkHeaders(headers);\n    operation.setContext({\n      headers: lHeaders\n    });\n    return forward(operation);\n  });\n\nconst httpLink = apolloConfig =>\n  createHttpLink({\n    uri:\n      apolloConfig && apolloConfig.apiUrl\n        ? apolloConfig.apiUrl\n        : config.API_URL,\n    credentials: 'same-origin'\n  });\n\nconst requestLink = (apolloConfig, headers) =>\n  ApolloLink.from([\n    authMiddleware(headers),\n    // errorLink(),\n    httpLink(apolloConfig)\n  ]);\n\nexport const terminalLink = (apolloConfig, headers) =>\n  split(\n    isUpload,\n    createUploadLink({\n      headers: linkHeaders(headers),\n      uri:\n        apolloConfig && apolloConfig.apiUrl\n          ? apolloConfig.apiUrl\n          : config.API_URL,\n      credentials: 'same-origin'\n    }),\n    requestLink(apolloConfig, headers)\n  );\n\nconst create = (apolloConfig, initialState, headers) => {\n  const createCache = apolloConfig.createCache || createDefaultCache;\n  const _config = {\n    link: terminalLink(apolloConfig, headers),\n    connectToDevTools: process.browser,\n    ssrMode: !process.browser,\n    cache: createCache().restore(initialState || {}),\n    ...apolloConfig\n  };\n\n  delete _config.createCache;\n\n  return new ApolloClient(_config);\n};\n\nexport default (apolloConfig, initialState, headers) => {\n  if (isFunction(apolloConfig)) {\n    apolloConfig = apolloConfig(headers);\n  }\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!process.browser) {\n    return create(apolloConfig, initialState, headers);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(apolloConfig, initialState, headers);\n  }\n\n  return apolloClient;\n};\n"]}