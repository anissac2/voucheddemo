'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.terminalLink = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _apolloClient = require('apollo-client');

var _apolloCacheInmemory = require('apollo-cache-inmemory');

var _apolloLink = require('apollo-link');

var _apolloLinkHttp = require('apollo-link-http');

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _lodash = require('lodash.isfunction');

var _lodash2 = _interopRequireDefault(_lodash);

var _apolloUploadClient = require('apollo-upload-client');

var _config2 = require('../config');

var _config3 = _interopRequireDefault(_config2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var apolloClient = null;

// Polyfill fetch() on the server (used by apollo-client)
if (!process.browser) {
  global.fetch = _isomorphicFetch2.default;
}

var createDefaultCache = function createDefaultCache() {
  return new _apolloCacheInmemory.InMemoryCache({
    dataIdFromObject: function dataIdFromObject(result) {
      return result.id || result.sid || null;
    }
  });
};

var isFile = function isFile(value) {
  return (
    // eslint-disable-next-line
    typeof File !== 'undefined' && value instanceof File ||
    // eslint-disable-next-line
    typeof Blob !== 'undefined' && value instanceof Blob
  );
};
// value instanceof ReactNativeFile;

var isUpload = function isUpload(_ref) {
  var variables = _ref.variables;
  return Object.values(variables).some(isFile);
};

var linkHeaders = function linkHeaders(headers) {
  var key = headers ? headers['X-Api-Key'] : null;
  if (key) {
    return {
      'X-Api-Key': key
    };
  }
  return {};
};
var authMiddleware = function authMiddleware(headers) {
  return new _apolloLink.ApolloLink(function (operation, forward) {
    var lHeaders = linkHeaders(headers);
    operation.setContext({
      headers: lHeaders
    });
    return forward(operation);
  });
};

var httpLink = function httpLink(apolloConfig) {
  return (0, _apolloLinkHttp.createHttpLink)({
    uri: apolloConfig && apolloConfig.apiUrl ? apolloConfig.apiUrl : _config3.default.API_URL,
    credentials: 'same-origin'
  });
};

var requestLink = function requestLink(apolloConfig, headers) {
  return _apolloLink.ApolloLink.from([authMiddleware(headers),
  // errorLink(),
  httpLink(apolloConfig)]);
};

var terminalLink = exports.terminalLink = function terminalLink(apolloConfig, headers) {
  return (0, _apolloLink.split)(isUpload, (0, _apolloUploadClient.createUploadLink)({
    headers: linkHeaders(headers),
    uri: apolloConfig && apolloConfig.apiUrl ? apolloConfig.apiUrl : _config3.default.API_URL,
    credentials: 'same-origin'
  }), requestLink(apolloConfig, headers));
};

var create = function create(apolloConfig, initialState, headers) {
  var createCache = apolloConfig.createCache || createDefaultCache;
  var _config = _extends({
    link: terminalLink(apolloConfig, headers),
    connectToDevTools: process.browser,
    ssrMode: !process.browser,
    cache: createCache().restore(initialState || {})
  }, apolloConfig);

  delete _config.createCache;

  return new _apolloClient.ApolloClient(_config);
};

exports.default = function (apolloConfig, initialState, headers) {
  if ((0, _lodash2.default)(apolloConfig)) {
    apolloConfig = apolloConfig(headers);
  }
  // Make sure to create a new client for every server-side request so that data
  // isn't shared between connections (which would be bad)
  if (!process.browser) {
    return create(apolloConfig, initialState, headers);
  }

  // Reuse client on the client-side
  if (!apolloClient) {
    apolloClient = create(apolloConfig, initialState, headers);
  }

  return apolloClient;
};
//# sourceMappingURL=initApollo.js.map