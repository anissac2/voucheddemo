import Client, { utils } from '../src/client';
import { InvalidRequestError } from '../src/common/errors';
import { expectError } from './utils';
import config from './config';

const printOutPhoto = photo => (photo ? photo.slice(0, 5) : null);
describe('client', () => {
  describe('constructor', () => {
    test('create a client - no key', () => {
      expect(() => Client()).toThrowError(InvalidRequestError);
    });
  });
  describe('jobs', () => {
    test(
      'jobs - simple',
      async () => {
        const client = Client(config.API_KEY);
        const jobs = await client.jobs({
          pageSize: 2,
          // token:
          //   'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqb2JfaWQiOiI5VldmX0tXQyIsImlhdCI6MTU3MDc3NDE4OCwiZXhwIjoxNTcyMDcwMTg4fQ.k_INdUHZ_NmqIpC85F15-wRuHamq6ouJAndvLKsnFVc',

          // token: 'djdkdjk',
          // withPhotos: true,
          fromDate: '2017-12-21T23:57:06+00:00'
          // ids: ['xIiPQ7IdI']
        });
        // console.log(`  -- close(jobs) ${JSON.stringify({close(jobs)})}`)
        // console.log(`  -- jobs ${JSON.stringify({ jobs })}`);
        expect(jobs).toMatchObject({
          total: 0,
          totalPages: 0,
          pageSize: 2,
          page: 1,
          items: []
        });
      },
      10 * 1000
    );
  });
  describe('updateSecretClientKey', () => {
    test('updateSecretClientKey - success', async () => {
      const client = Client(config.API_KEY);
      const secretClientKey = 'MySecretKeyChangeMe';
      const key = await client.updateSecretClientKey(secretClientKey);
      expect(key).toMatchObject({ secretClientKey });
    });
    test('updateSecretClientKey - fails', async () => {
      const client = Client(config.API_KEY);
      const secretClientKey = 'M';
      try {
        await client.updateSecretClientKey(secretClientKey);
      } catch (e) {
        expect(e).toMatchObject({
          type: 'InvalidRequestError',
          errors: [
            {
              type: 'InvalidRequestError',
              message: 'Please enter a valid secretClientKey'
            }
          ]
        });
      }
    });
  });

  describe('submit', () => {
    test(
      'submit - id only ',
      async () => {
        const client = Client(config.API_KEY);
        const idPhotoBase64 = await utils.imageToBase64(
          '/opt/app/tests/data/oh-license-r1.png'
        );
        const job = await client
          .submit({
            idPhoto: idPhotoBase64,
            type: 'id-verification'
          })
          .catch(error => console.log(`  -- error `, error));

        expect(typeof job.id).toBe('string');
      },
      10 * 1000
    );
  });
  describe('submit', () => {
    test(
      'submit - selfie only',
      async () => {
        const client = Client(config.API_KEY);
        const userPhotoBase64 = await utils.imageToBase64(
          '/opt/app/tests/data/selfie.jpg'
        );
        const job = await client.submit({
          userPhoto: userPhotoBase64,
          idPhoto: userPhotoBase64,
          // callbackURL: 'https://www.google.com',
          type: 'id-verification',
          firstName: 'Janice',
          lastName: 'Way',
          dob: '06/22/1990'
        });
        expect(typeof job.id).toBe('string');
      },
      10 * 1000
    );
    test(
      'submit - no callback',
      async () => {
        const client = Client(config.API_KEY);
        const userPhotoBase64 = await utils.imageToBase64(
          '/opt/app/tests/data/large.png'
        );
        const idPhotoBase64 = await utils.imageToBase64(
          '/opt/app/tests/data/oh-license-r1.png'
        );
        const job = await client.submit({
          userPhoto: userPhotoBase64,
          idPhoto: idPhotoBase64,
          type: 'id-verification',
          firstName: 'Thor',
          lastName: 'Odinson',
          dob: '06/22/1970'
        });
        expect(typeof job.id).toBe('string');
      },
      15 * 1000
    );
    test('submit - success', async () => {
      const client = Client(config.API_KEY);
      const userPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.png'
      );
      const idPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.jpg'
      );
      const job = await client.submit({
        userPhoto: userPhotoBase64,
        idPhoto: idPhotoBase64,
        callbackURL: 'https://www.google.com',
        type: 'id-verification',
        firstName: 'Janice',
        lastName: 'Way',
        dob: '06/22/1990'
      });
      expect(typeof job.id).toBe('string');
    });

    test('submit - no selfie', async () => {
      const client = Client(config.API_KEY);
      const idPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.jpg'
      );
      const job = await client.submit({
        idPhoto: idPhotoBase64,
        callbackURL: 'https://www.google.com',
        type: 'id-verification',
        firstName: 'Janice',
        lastName: 'Way',
        dob: '06/22/1990'
      });
      expect(typeof job.id).toBe('string');
    });

    test('submit - transport', async () => {
      const client = Client(config.API_KEY);
      await client.submit({
        userPhoto: await utils.imageToBase64('/opt/app/tests/data/selfie.jpg'),
        idPhoto: await utils.imageToBase64('/opt/app/tests/data/id.jpg'),
        dotPhoto: await utils.imageToBase64('/opt/app/tests/data/dot.jpg'),
        twicPhoto: await utils.imageToBase64('/opt/app/tests/data/twic.jpg'),
        carInsurancePhoto: await utils.imageToBase64(
          '/opt/app/tests/data/car-insurance.jpg'
        ),
        callbackURL: 'https://www.google.com',
        type: 'id-verification',
        firstName: 'Janice',
        lastName: 'Way',
        dob: '03/22/1990'
      });
    });
    test('submit - bad date', async () => {
      const client = Client(config.API_KEY);
      const userPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.png'
      );
      const idPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.jpg'
      );
      await client
        .submit({
          userPhoto: userPhotoBase64,
          idPhoto: idPhotoBase64,
          callbackURL: 'https://www.google.com',
          type: 'id-verification',
          firstName: 'Janice',
          lastName: 'Way',
          dob: '13/22/1990'
        })
        .catch(e =>
          expect(e.errors).toMatchObject([
            {
              type: 'InvalidRequestError',
              message: '13/22/1990 is not a valid date in the format MM/DD/YYYY'
            }
          ])
        );
    });
    test('submit - missing fields', async () => {
      const client = Client(config.API_KEY);
      const userPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.png'
      );
      const idPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.jpg'
      );
      await client
        .submit({
          userPhoto: userPhotoBase64,
          idPhoto: idPhotoBase64,
          callbackURL: null,
          firstName: 'Thor Thunder'
        })
        .catch(e =>
          expect(e.errors).toMatchObject([
            {
              type: 'InvalidRequestError',
              message: 'Please enter lastName'
            },
            {
              type: 'InvalidRequestError',
              message: 'Please enter dob'
            }
          ])
        );
    });
    test('submit - unauthorized', async () => {
      const client = Client('jskdjkfjdsk');
      const userPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.png'
      );
      const idPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.jpg'
      );
      await client
        .submit({
          userPhoto: userPhotoBase64,
          idPhoto: idPhotoBase64
        })
        .catch(e =>
          expectError(e, {
            type: 'AuthenticationError'
          })
        );
    });
    test('submit - bad connection', async () => {
      const client = Client(config.API_KEY, {
        apiUrl: 'http://localhost:9999/badurl'
      });
      const userPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.png'
      );
      const idPhotoBase64 = await utils.imageToBase64(
        '/opt/app/tests/data/large.jpg'
      );
      await client
        .submit({
          userPhoto: userPhotoBase64,
          idPhoto: idPhotoBase64
        })
        .catch(e =>
          expectError(e, {
            type: 'ConnectionError',
            message:
              'request to http://localhost:9999/badurl failed, reason: connect ECONNREFUSED 127.0.0.1:9999'
          })
        );
    });
  });
});
